##  My Alien Girlfriend: A Java Adventure in Inheritance and Polymorphism

You've found the love of your life, Xylia! But there's a twist - she's from another planet! Xylia has the amazing ability to shapeshift into different creatures here on Earth. To understand her unique biology and build a strong relationship, you want to create a Java program that models her shapeshifting using inheritance and polymorphism.

**The Challenge:**

Imagine Xylia as a complex puzzle. We'll build her different forms using inheritance, a way for classes to share properties. 

1. **Building Xylia's "Species Tree":**
    * Start with a class called `Alien`. This is the foundation, holding Xylia's general information like her name and home planet. 
    * Next, create a class called `EarthlyForm` that inherits from `Alien`. This represents Xylia's shapeshifted versions on Earth.
    * Now, things get interesting! You can create even more specific forms by creating subclasses of `EarthlyForm`. Think `Human`, `Bird`, or `Fish` - each inheriting traits from `EarthlyForm` and adding their own unique details (Single Inheritance).
    * Want to go deeper? Explore multilevel inheritance! A `Human` class could inherit from `Humanoid` (a broader category) which in turn inherits from `EarthlyForm`.
    * Feeling ambitious? Try hierarchical inheritance! Create separate branches for alien visitors, like `Reptilian` and `Mammalian`, both inheriting from the base `Alien` class.

2. **Modeling Shapeshifting with Polymorphism:**
    * Polymorphism means "many forms." We'll use it to create methods that behave differently depending on Xylia's current shape.
    * Define a method called `shiftForm(String newForm)` in the `Alien` class. This allows you to "tell" Xylia to change into a specific form (e.g., "Human" or "Bird").
    * Create methods like `speak()` and `move()` in the base class. These methods will be overridden (changed) in subclasses to reflect Xylia's actions in each form. Imagine a `speak()` method printing "Hello" for a Human and a chirp for a Bird! Similarly, `move()` could describe "walking" or "flying" based on the form.

**Bonus Round:**

- Create an interface called `Communicable` with a method `communicate()`.  Some alien forms (like a telepathic visitor) could implement this interface with unique communication methods.

**By conquering this coding challenge, you'll not only understand Xylia's amazing abilities better, but you might just impress her with your programming skills!**
